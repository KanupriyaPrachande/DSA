#include <iostream> 
#include <vector> 
using namespace std; 
 
class OptimalBST { 
public: 
    pair<int, vector<vector<int>>> optimalBST(const vector<int>& keys, const 
vector<int>& prob) { 
        int n = keys.size(); 
        vector<vector<int>> cost(n, vector<int>(n, 0)); 
        vector<vector<int>> root(n, vector<int>(n, 0)); 
        vector<int> sumProb(n + 1, 0); 
        for (int i = 1; i <= n; ++i) { 
            sumProb[i] = sumProb[i - 1] + prob[i - 1]; 
        } 
        for (int len = 1; len <= n; ++len) { 
            for (int i = 0; i <= n - len; ++i) { 
                int j = i + len - 1; 
                cost[i][j] = 1000000000; 
                for (int r = i; r <= j; ++r) { 
                    int leftCost = (r > i) ? cost[i][r - 1] : 0; 
                    int rightCost = (r < j) ? cost[r + 1][j] : 0; 
                    int totalCost = leftCost + rightCost + sumProb[j + 1] - 
sumProb[i]; 
                    if (totalCost < cost[i][j]) { 
                        cost[i][j] = totalCost; 
                        root[i][j] = r; 
                    } 
                } 
            } 
        } 
        return {cost[0][n - 1], root}; 
    } 
 
    void printBST(const vector<int>& keys, const vector<vector<int>>& root, int i, int 
j) { 
        if (i > j) return; 
        int r = root[i][j]; 
        cout << "Root: " << keys[r] << endl; 
        printBST(keys, root, i, r - 1); 
        printBST(keys, root, r + 1, j); 
    } 
}; 
 
int main() { 
    int n; 
    cout << "Enter number of keys: "; 
    cin >> n; 
    vector<int> keys(n); 
    vector<int> prob(n); 
    cout << "Enter the sorted keys and their probabilities:\n"; 
    for (int i = 0; i < n; ++i) { 
        cin >> keys[i] >> prob[i]; 
    } 
    OptimalBST obst; 
    auto [minCost, root] = obst.optimalBST(keys, prob); 
    cout << "Minimum search cost: " << minCost << endl; 
    cout << "\nOptimal BST structure:\n"; 
    obst.printBST(keys, root, 0, n - 1); 
    return 0; 
} 
